
(* Add exercise 3 *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; length <= 3} 

(*Extension*)
in letrec add_helper (nd) = proc (n) {
  if (number?(nd)) 
  then 
    {data <= n; left <= 0; right <= 0}
  else 
    if (nd.data << n)
    then
      begin
      nd.right <= ((add_helper nd.left) n);
      nd
      end
    else
      if (nd.data >> n)
      then
        begin
        nd.left <= ((add_helper nd.left) n);
        nd
        end
      else
      0
}
in let add_bt = proc (t) { proc (data) { ((add_helper t.root) data) } }
in begin
     ((add_bt t1) 23);
     t1.length <= t1.length+1;
     debug(t1)		
   end
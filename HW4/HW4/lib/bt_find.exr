
(* Find exercise  *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; length <= 3} 

(*Extension*)
in letrec find_helper (nd) = proc (target) {
  (if number?(nd)
   then zero?(1)
   else (
     if (nd.data = target)
     then zero?(0)
     else (
       if (nd.data << target)
       then ((find_helper nd.right) target)
       else ((find_helper nd.left) target))
   ))
} in

let find_bt = proc (t) { proc (x) { ((find_helper t.root) x) }}

in ( (find_bt t1) 12)